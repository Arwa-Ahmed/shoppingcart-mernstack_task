{"version":3,"sources":["components/Products.js","actions/productActions.js","constants/productConstans.js","components/Product.js","actions/cartActions.js","constants/cartConstants.js","components/Cart.js","App.js","serviceWorker.js","store.js","reducers/productReducers.js","reducers/cartReducer.js","index.js"],"names":["Products","props","productList","useSelector","state","products","loading","error","dispatch","useDispatch","useEffect","a","type","axios","get","data","payload","doc","message","className","map","product","key","_id","to","src","image","alt","name","price","Product","useState","qty","setQty","productDetails","productId","match","params","id","description","countInStock","value","onChange","e","target","Array","keys","x","onClick","history","push","addToCart","getState","cartItems","cart","Cookie","set","JSON","stringify","Cart","location","search","Number","split","removeFromCartHandler","removeFromCart","length","item","field","product_id","qtyvalue","document","querySelector","newvalue","parseInt","decrement","readOnly","min","incerement","reduce","c","App","numOfProduct","class","count","exact","path","component","Boolean","window","hostname","initialState","getJSON","reducer","combineReducers","action","find","filter","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.f2df2954.chunk.js","sourcesContent":["import React, {useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { listProducts } from '../actions/productActions';\r\n\r\n\r\n\r\n\r\nfunction Products(props) {\r\n\r\n    //get cart items\r\n  const productList = useSelector((state) => state.productList);\r\n  const { products, loading, error } = productList;\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n      //from action\r\n    dispatch(listProducts());\r\n\r\n    return () => {\r\n      //\r\n    };\r\n  }, []);\r\n\r\n \r\n  return (\r\n    <>\r\n     \r\n      {loading ? (\r\n        <div>Loading...</div>\r\n      ) : error ? (\r\n        <div>{error}</div>\r\n      ) : (\r\n        <ul className=\"products\">\r\n          {products.map((product) => (\r\n            <li key={product._id}>\r\n              <div className=\"product\">\r\n                <Link to={'/product/' + product._id}>\r\n                  <img\r\n                    className=\"product-image\"\r\n                    src={`/images/${product.image}`}\r\n                    alt=\" \"\r\n                  />\r\n                </Link>\r\n                <div className=\"product-name\">\r\n                  <Link to={'/product/' + product._id}>{product.name}</Link>\r\n                </div>\r\n                <div className=\"product-price\">${product.price}</div>\r\n              \r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nexport default Products;","import {\r\n     PRODUCT_LIST_REQUEST,\r\n      PRODUCT_LIST_SUCCESS,\r\n       PRODUCT_LIST_FAIL,\r\n       PRODUCT_DETAILS_REQUEST,\r\n       PRODUCT_DETAILS_SUCCESS,\r\n       PRODUCT_DETAILS_FAIL\r\n} from \"../constants/productConstans\";\r\nimport axios from 'axios';\r\n\r\nconst listProducts = ()=> async (dispatch)=>{\r\n    try{\r\n        dispatch({type:PRODUCT_LIST_REQUEST});\r\n        const {data} = await axios.get(\"https://shoppingcart-mernstackapp.herokuapp.com/products/\");\r\n        dispatch({type:PRODUCT_LIST_SUCCESS,payload:data.products.doc});\r\n    }catch(error){\r\n        dispatch({type:PRODUCT_LIST_FAIL,payload:error.message});\r\n\r\n    }\r\n   \r\n}\r\n\r\nconst detailsProduct = (productId) => async (dispatch) => {\r\n    try {\r\n      dispatch({ type: PRODUCT_DETAILS_REQUEST, payload: productId });\r\n      const { data } = await axios.get('https://shoppingcart-mernstackapp.herokuapp.com/products/' + productId);\r\n      dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data.product[0] });\r\n     // console.log(data.product[0]);\r\n    } catch (error) {\r\n      dispatch({ type: PRODUCT_DETAILS_FAIL, payload: error.message });\r\n    }\r\n  };\r\n\r\nexport {\r\n    listProducts,\r\n    detailsProduct\r\n};","  \r\nexport const PRODUCT_LIST_REQUEST = 'PRODUCT_LIST_REQUEST';\r\nexport const PRODUCT_LIST_SUCCESS = 'PRODUCT_LIST_SUCCESS';\r\nexport const PRODUCT_LIST_FAIL = 'PRODUCT_LIST_FAIL';\r\n\r\nexport const PRODUCT_DETAILS_REQUEST = 'PRODUCT_DETAILS_REQUEST';\r\nexport const PRODUCT_DETAILS_SUCCESS = 'PRODUCT_DETAILS_SUCCESS';\r\nexport const PRODUCT_DETAILS_FAIL = 'PRODUCT_DETAILS_FAIL';\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { detailsProduct } from '../actions/productActions';\r\n\r\nfunction Product(props) {\r\n  const [qty, setQty] = useState(1);\r\n  const productDetails = useSelector(state => state.productDetails);\r\n  const { product, loading, error } = productDetails;\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    //from action\r\n    dispatch(detailsProduct(props.match.params.id));\r\n\r\n  return () => {\r\n    // \r\n  };\r\n},[]);\r\n\r\n//add to cart\r\nconst addToCart= ()=>{\r\n  // console.log(localStorage.getItem('quantity'));\r\n  //  var currentquantity = parseInt(localStorage.getItem('quantity')) + qty;\r\n  //  localStorage.setItem('quantity',currentquantity);\r\n\r\n    props.history.push(\"/cart/\"+props.match.params.id+\"?qty=\"+qty)\r\n\r\n}\r\n\r\n  \r\n  return (\r\n    <div>\r\n    \r\n      {loading ? (\r\n        <div>Loading...</div>\r\n      ) : error ? (\r\n        <div>{error} </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"details\">\r\n            <div className=\"details-image\">\r\n              <img className=\"product-image\"\r\n                    src={`/images/${product.image}`} alt=\"product\"></img>\r\n            </div>\r\n            <div className=\"details-info\">\r\n              <ul>\r\n                <li>\r\n                  <h4>{product.name}</h4>\r\n                </li>\r\n               \r\n                <li>\r\n                <b>Price:</b> ${product.price}\r\n                </li>\r\n                <li>\r\n                <b>Description:</b>\r\n                  <div>{product.description}</div>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"details-action\">\r\n              <ul>\r\n                <li>Price: {product.price}</li>\r\n               <li>\r\n                   Status: {product.countInStock>0?\"Available\":\"Unavilable\"}\r\n               </li>\r\n                <li>\r\n                  Qty:{' '}\r\n                  <select\r\n                    value={qty}\r\n                    onChange={(e) => {\r\n                      setQty(e.target.value);\r\n                    }}\r\n                  >\r\n                    {/* Available quantity of this product */}\r\n                    {[...Array(product.countInStock).keys()].map((x) => (\r\n                      <option key={x + 1} value={x + 1}>\r\n                        {x + 1}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </li>\r\n                <li>\r\n                    {/* if product available */}\r\n                  {product.countInStock > 0 && (\r\n                    <button\r\n                      onClick={addToCart}\r\n                      className=\"button primary\"\r\n                    >\r\n                      Add to Cart\r\n                    </button>\r\n                  )}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nexport default Product;\r\n","\r\nimport axios from \"axios\";\r\nimport Cookie from \"js-cookie\";\r\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM } from \"../constants/cartConstants\";\r\n\r\n\r\nconst addToCart = (productId, qty) => async (dispatch, getState) => {\r\n\r\n    try {\r\n        //get product\r\n        const { data } = await axios.get('https://shoppingcart-mernstackapp.herokuapp.com/products/' + productId);\r\n        // console.log(data.product[0])\r\n        dispatch({\r\n            type: CART_ADD_ITEM, payload: {\r\n                product: data.product[0]._id,\r\n                name: data.product[0].name,\r\n                image: data.product[0].image,\r\n                price: data.product[0].price,\r\n                countInStock: data.product[0].countInStock,\r\n                qty: qty\r\n            }\r\n        })\r\n\r\n        //save the current items in cookie\r\n        const { cart: { cartItems } } = getState();\r\n        Cookie.set(\"cartItems\", JSON.stringify(cartItems));\r\n\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n\r\n\r\n//remove product from cart\r\nconst removeFromCart = (productId) => (dispatch, getState) => {\r\n    dispatch({ type: CART_REMOVE_ITEM, payload: productId });\r\n\r\n    const { cart: { cartItems } } = getState();\r\n    Cookie.set(\"cartItems\", JSON.stringify(cartItems));\r\n\r\n}\r\n\r\nexport { addToCart, removeFromCart }","export const CART_ADD_ITEM = 'CART_ADD_ITEM';\r\nexport const CART_REMOVE_ITEM = 'CART_REMOVE_ITEM';","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addToCart, removeFromCart } from '../actions/cartActions';\r\n\r\n\r\nfunction Cart(props) {\r\n\r\n    //get cart items\r\n\r\n    const cart = useSelector(state => state.cart);\r\n\r\n    const { cartItems } = cart;\r\n    // console.log(cartItems);\r\n\r\n    const productId = props.match.params.id;\r\n    // console.log(productId);\r\n\r\n    // get quantity from url\r\n    const qty = props.location.search ? Number(props.location.search.split(\"=\")[1]) : 1;\r\n    // console.log(qty)\r\n    const dispatch = useDispatch();\r\n\r\n    //remove item from cart\r\n    const removeFromCartHandler = (productId) => {\r\n        dispatch(removeFromCart(productId));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (productId) {\r\n            dispatch(addToCart(productId, qty));\r\n        }\r\n    }, []);\r\n\r\n    \r\n   \r\n    //quantity decrement\r\n    const decrement = (product_id) => {\r\n\r\n        var qtyvalue = document.querySelector('#qty_' + product_id).value;\r\n        if (qtyvalue > 1) {\r\n            document.querySelector('#qty_' + product_id).value = qtyvalue - 1;\r\n            var newvalue = parseInt(document.querySelector('#qty_' + product_id).value);\r\n            dispatch(addToCart(product_id, newvalue))\r\n          \r\n        }\r\n    }\r\n    //quantity incerement\r\n    const incerement = (product_id, countInStock) => {\r\n        var qtyvalue = document.querySelector('#qty_' + product_id).value;\r\n        if (qtyvalue < countInStock) {\r\n            document.querySelector('#qty_' + product_id).value = parseInt(qtyvalue) + 1;\r\n            var newvalue = parseInt(document.querySelector('#qty_' + product_id).value);\r\n            dispatch(addToCart(product_id, newvalue));\r\n\r\n        }\r\n    }\r\n\r\n    return <div className=\"cart\">\r\n        <div className=\"cart-list\">\r\n            <ul className=\"cart-list-container\">\r\n                <li>\r\n                    <h3>\r\n                        Shopping Cart\r\n                    </h3>\r\n                </li>\r\n                {/* if cart is empty */}\r\n                {cartItems.length === 0 ?\r\n                    <div>\r\n                        Cart is empty\r\n                    </div>\r\n                    //   cart have items\r\n                    : cartItems.map(item =>\r\n                        <li key={item.product}>\r\n                            <div className=\"cart-image\">\r\n                                <img src={`/images/${item.image}`} alt=\"product\" />\r\n                            </div>\r\n                            <div className=\"cart-name\">\r\n                                \r\n                                <div>\r\n                                    <Link to={\"/product/\" + item.product}>\r\n                                        {item.name}\r\n                                    </Link>\r\n\r\n                                </div>\r\n                            </div>\r\n                        \r\n                            <div className=\"item-qty\" >\r\n                                <input type='button' value='-' className='qtyminus btn-piont' id={\"qtyminus_\" + item.product} field='quantity' onClick={() => decrement(item.product)} />\r\n                                <input type='text' readOnly=\"readonly\" name='quantity' className='qty' id={\"qty_\" + item.product} min=\"0\" value={item.qty} onChange={(e) => dispatch(addToCart(item.product, parseInt(e.target.value)))} />\r\n                                <input type='button' value='+' className='qtyplus btn-piont' field='quantity' id={\"qtyplus_\" + item.product} onClick={() => incerement(item.product, item.countInStock)} />\r\n                            </div>\r\n\r\n                            <div className=\"cart-price\">\r\n                                ${item.price}\r\n                            </div>\r\n                            <div className=\"item-remove\">\r\n                                <a  className=\"btn-piont\" onClick={() => removeFromCartHandler(item.product)} >\r\n                                    &#10006; </a>\r\n                            </div>\r\n                        </li>\r\n\r\n                    )\r\n                }\r\n\r\n                <li>\r\n                    <div className=\"cart-action\">\r\n                        <h3>\r\n                            Subtotal ( {cartItems.reduce((a, c) => a + c.qty, 0)} items)\r\n                             :\r\n                            $ {cartItems.reduce((a, c) => a + c.price * c.qty, 0)}\r\n                        </h3>\r\n                        <button onClick={addToCart} className=\"button primary\">\r\n                      Checkout\r\n                    </button>\r\n                    </div>\r\n\r\n                </li>\r\n\r\n            </ul>\r\n\r\n        </div>\r\n\r\n    </div>\r\n}\r\nexport default Cart;","import React from 'react';\r\nimport './App.css';\r\nimport Products from './components/Products';\r\nimport Product from './components/Product';\r\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\r\nimport Cart from './components/Cart';\r\nimport Cookie from \"js-cookie\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FaShoppingCart } from 'react-icons/fa';\r\n// import Icon from '@ant-design/icons';\r\nimport {Badge} from 'antd'\r\nimport NotificationBadge from 'react-notification-badge';\r\n\r\nfunction App() {\r\n\r\n\r\n  //count of product in cart\r\n  const cart = useSelector(state => state.cart);\r\n  \r\n  let numOfProduct = 0;\r\n  cart.cartItems.map(item => \r\n    numOfProduct = numOfProduct + parseInt(item.qty)\r\n  )\r\n  \r\n \r\n  return (\r\n   \r\n    <BrowserRouter>\r\n    <div className=\"App\">\r\n        <div className=\"grid-container\">\r\n          <header className=\"header\">\r\n          <Link to=\"/\" className=\"link\">Shopping Cart</Link>\r\n\r\n          <div className=\"header-links\">\r\n\r\n           {/* notification ===> number of products in cart */}\r\n            <div class=\"notifi\">\r\n            <NotificationBadge count={numOfProduct} />\r\n            </div>\r\n\r\n            <Link to={'/cart/'+ ''}><FaShoppingCart/>\r\n            </Link>\r\n\r\n         \r\n\r\n            </div>\r\n          </header>\r\n          <main className=\"main\">\r\n            <div className=\"content\">\r\n              <Route exact path=\"/\" component={Products}/>\r\n              <Route path=\"/product/:id\" component={Product} />\r\n              <Route path=\"/cart/:id?\" component={Cart}/>\r\n            </div>\r\n          </main>\r\n        </div>\r\n  \r\n    </div>\r\n\r\n    </BrowserRouter>\r\n\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createStore, combineReducers ,applyMiddleware,compose} from 'redux';\r\nimport { productListReducer,  productDetailsReducer,} from './reducers/productReducers';\r\n\r\nimport thunk from 'redux-thunk';\r\nimport Cookie from 'js-cookie';\r\nimport { cartReducer } from './reducers/cartReducer';\r\n\r\n//get cookie access and save change in qty when refresh page\r\nconst cartItems = Cookie.getJSON(\"cartItems\") || [];\r\n\r\nconst initialState = {cart:{cartItems}};\r\n\r\nconst reducer = combineReducers({\r\n    productList : productListReducer,\r\n    productDetails: productDetailsReducer,\r\n    cart:cartReducer,\r\n})\r\n\r\n//to see redux in browser\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n    reducer,\r\n    initialState,\r\n    composeEnhancer(applyMiddleware(thunk))\r\n  );\r\n\r\nexport default store;","import { PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL } from \"../constants/productConstans\";\r\n\r\nfunction productListReducer(state = { products: [] }, action) {\r\n    switch (action.type) {\r\n      case PRODUCT_LIST_REQUEST:\r\n        return { loading: true, products: [] };\r\n      case PRODUCT_LIST_SUCCESS:\r\n        return { loading: false, products: action.payload };\r\n      case PRODUCT_LIST_FAIL:\r\n        return { loading: false, error: action.payload };\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n\r\n  function productDetailsReducer(state = { product: {} }, action) {\r\n    switch (action.type) {\r\n      case PRODUCT_DETAILS_REQUEST:\r\n        return { loading: true };\r\n      case PRODUCT_DETAILS_SUCCESS:\r\n        return { loading: false, product: action.payload };\r\n      case PRODUCT_DETAILS_FAIL:\r\n        return { loading: false, error: action.payload };\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  export {productListReducer , productDetailsReducer}","import { CART_ADD_ITEM, CART_REMOVE_ITEM } from \"../constants/cartConstants\";\r\n\r\nfunction cartReducer(state = { cartItems: []},action) {\r\n    switch (action.type) {\r\n        case CART_ADD_ITEM:\r\n            const item = action.payload;\r\n            const product = state.cartItems.find(x => x.product === item.product);\r\n            if (product) {\r\n                return {\r\n                     //check if product already exist in the cart\r\n                     //...state is a previous\r\n                    cartItems:state.cartItems.map(x => x.product === product.product ? item : x)\r\n                };\r\n            }\r\n            //else\r\n            return { cartItems: [...state.cartItems, item] };\r\n        case CART_REMOVE_ITEM:\r\n            return { cartItems: state.cartItems.filter(x => x.product !== action.payload) };\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport { cartReducer }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}